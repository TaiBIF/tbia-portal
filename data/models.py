from django.db import models
from django.utils import timezone

''''
CharField is generally used for storing small strings like first name, last name, etc. To store larger text TextField is used.
max_length is required for CharField
'''

# TaiCoL taxon-based
class Taxon(models.Model):
    taxonUUID = models.CharField(max_length=100, blank=True, null=True)
    name_id = models.CharField(max_length=100, blank=True, null=True)
    formatted_name = models.CharField(max_length=1000, blank=True, null=True)
    # simple_name = models.CharField(max_length=1000, blank=True, null=True)
    # name_author = models.CharField(max_length=1000, blank=True, null=True)
    synonyms = models.TextField(blank=True, null=True)
    misapplied = models.TextField(blank=True, null=True)
    rank = models.CharField(max_length=1000, blank=True, null=True)
    common_name_c = models.CharField(max_length=1000, blank=True, null=True)
    alternative_name_c = models.TextField(blank=True, null=True)
    originalModified = models.DateField(auto_now_add=True)
    originalCreated = models.DateField(auto_now_add=True)
    modified = models.DateField(auto_now_add=True)
    created = models.DateField(auto_now_add=True)
    # 分類
    domain = models.CharField(max_length=100, blank=True, null=True)
    domain_c = models.CharField(max_length=100, blank=True, null=True)
    superkingdom = models.CharField(max_length=100, blank=True, null=True)
    superkingdom_c = models.CharField(max_length=100, blank=True, null=True)
    kingdom = models.CharField(max_length=100, blank=True, null=True)
    kingdom_c = models.CharField(max_length=100, blank=True, null=True)
    subkingdom = models.CharField(max_length=100, blank=True, null=True)
    subkingdom_c = models.CharField(max_length=100, blank=True, null=True)
    infrakingdom = models.CharField(max_length=100, blank=True, null=True)
    infrakingdom_c = models.CharField(max_length=100, blank=True, null=True)
    superdivision = models.CharField(max_length=100, blank=True, null=True)
    superdivision_c = models.CharField(max_length=100, blank=True, null=True)
    division = models.CharField(max_length=100, blank=True, null=True)
    division_c = models.CharField(max_length=100, blank=True, null=True)
    subdivision = models.CharField(max_length=100, blank=True, null=True)
    subdivision_c = models.CharField(max_length=100, blank=True, null=True)
    infradivision = models.CharField(max_length=100, blank=True, null=True)
    infradivision_c = models.CharField(max_length=100, blank=True, null=True)
    parvdivision = models.CharField(max_length=100, blank=True, null=True)
    parvdivision_c = models.CharField(max_length=100, blank=True, null=True)
    superphylum = models.CharField(max_length=100, blank=True, null=True)
    superphylum_c = models.CharField(max_length=100, blank=True, null=True)
    phylum = models.CharField(max_length=100, blank=True, null=True)
    phylum_c = models.CharField(max_length=100, blank=True, null=True)
    subphylum = models.CharField(max_length=100, blank=True, null=True)
    subphylum_c = models.CharField(max_length=100, blank=True, null=True)
    infraphylum = models.CharField(max_length=100, blank=True, null=True)
    infraphylum_c = models.CharField(max_length=100, blank=True, null=True)
    microphylum = models.CharField(max_length=100, blank=True, null=True)
    microphylum_c = models.CharField(max_length=100, blank=True, null=True)
    parvphylum = models.CharField(max_length=100, blank=True, null=True)
    parvphylum_c = models.CharField(max_length=100, blank=True, null=True)
    superclass = models.CharField(max_length=100, blank=True, null=True)
    superclass_c = models.CharField(max_length=100, blank=True, null=True)
    Class = models.CharField(max_length=100, blank=True, null=True)
    Class_c = models.CharField(max_length=100, blank=True, null=True)
    subclass = models.CharField(max_length=100, blank=True, null=True)
    subclass_c = models.CharField(max_length=100, blank=True, null=True)
    infraclass = models.CharField(max_length=100, blank=True, null=True)
    infraclass_c = models.CharField(max_length=100, blank=True, null=True)
    superorder = models.CharField(max_length=100, blank=True, null=True)
    superorder_c = models.CharField(max_length=100, blank=True, null=True)
    order = models.CharField(max_length=100, blank=True, null=True)
    order_c = models.CharField(max_length=100, blank=True, null=True)
    suborder = models.CharField(max_length=100, blank=True, null=True)
    suborder_c = models.CharField(max_length=100, blank=True, null=True)
    infraorder = models.CharField(max_length=100, blank=True, null=True)
    infraorder_c = models.CharField(max_length=100, blank=True, null=True)
    superfamily = models.CharField(max_length=100, blank=True, null=True)
    superfamily_c = models.CharField(max_length=100, blank=True, null=True)
    family = models.CharField(max_length=100, blank=True, null=True)
    family_c = models.CharField(max_length=100, blank=True, null=True)
    subfamily = models.CharField(max_length=100, blank=True, null=True)
    subfamily_c = models.CharField(max_length=100, blank=True, null=True)
    tribe = models.CharField(max_length=100, blank=True, null=True)
    tribe_c = models.CharField(max_length=100, blank=True, null=True)
    subtribe = models.CharField(max_length=100, blank=True, null=True)
    subtribe_c = models.CharField(max_length=100, blank=True, null=True)
    genus = models.CharField(max_length=100, blank=True, null=True)
    genus_c = models.CharField(max_length=100, blank=True, null=True)
    subgenus = models.CharField(max_length=100, blank=True, null=True)
    subgenus_c = models.CharField(max_length=100, blank=True, null=True)
    section = models.CharField(max_length=100, blank=True, null=True)
    section_c = models.CharField(max_length=100, blank=True, null=True)
    subsection = models.CharField(max_length=100, blank=True, null=True)
    subsection_c = models.CharField(max_length=100, blank=True, null=True)
    species = models.CharField(max_length=100, blank=True, null=True)
    species_c = models.CharField(max_length=100, blank=True, null=True)
    # 種下
    subspecies = models.CharField(max_length=100, blank=True, null=True)
    nothosubspecies = models.CharField(max_length=100, blank=True, null=True)
    variety = models.CharField(max_length=100, blank=True, null=True)
    subvariety = models.CharField(max_length=100, blank=True, null=True)
    nothovariety = models.CharField(max_length=100, blank=True, null=True)
    form = models.CharField(max_length=100, blank=True, null=True)
    subform = models.CharField(max_length=100, blank=True, null=True)
    specialForm = models.CharField(max_length=100, blank=True, null=True)
    race = models.CharField(max_length=100, blank=True, null=True)
    stirp = models.CharField(max_length=100, blank=True, null=True)
    morph = models.CharField(max_length=100, blank=True, null=True)
    aberration = models.CharField(max_length=100, blank=True, null=True)
    hybridFormula = models.CharField(max_length=100, blank=True, null=True)
    class Meta:
        db_table = 'taxon'


# 物種出現紀錄
class Occurrence(models.Model):
    tbiaUUID = models.AutoField(primary_key=True)
    taxonUUID = models.CharField(max_length=100, blank=True, null=True)
    originalModified = models.DateField(blank=True, null=True)
    originalCreated = models.DateField(blank=True, null=True)
    modified = models.DateField(auto_now_add=True)
    created = models.DateField(auto_now_add=True)
    rightsHolder = models.CharField(max_length=100, blank=True, null=True)
    occurrenceID = models.CharField(max_length=1000, blank=True, null=True)
    originalScientificName = models.CharField(max_length=100, blank=True, null=True)
    originalVernacularName = models.CharField(max_length=100, blank=True, null=True)
    sensitiveCategory = models.CharField(max_length=100, blank=True, null=True)
    taxonRank = models.CharField(max_length=100, blank=True, null=True)
    eventDate = models.CharField(max_length=100, blank=True, null=True)
    standardDate = models.DateTimeField(blank=True, null=True)
    verbatimLongitude = models.CharField(max_length=1000, blank=True, null=True)
    verbatimLatitude = models.CharField(max_length=1000, blank=True, null=True)
    verbatimCoordinateSystem = models.CharField(max_length=100, blank=True, null=True)
    verbatimSRS = models.CharField(max_length=100, blank=True, null=True)
    standardLongitude = models.DecimalField(max_digits=13, decimal_places=10, blank=True, null=True)
    standardLatitude = models.DecimalField(max_digits=13, decimal_places=10, blank=True, null=True)
    coordinateUncertaintyInMeters = models.CharField(max_length=100, blank=True, null=True)
    dataGeneralizations = models.BooleanField(blank=True, null=True)
    coordinatePrecision = models.CharField(max_length=100, blank=True, null=True)
    locality = models.CharField(max_length=1000, blank=True, null=True)
    organismQuantity = models.CharField(max_length=1000, blank=True, null=True)
    organismQuantityType = models.CharField(max_length=100, blank=True, null=True)
    recordedBy = models.CharField(max_length=1000, blank=True, null=True)
    scientificNameID = models.CharField(max_length=100, blank=True, null=True)
    basisOfRecord = models.CharField(max_length=100, blank=True, null=True)
    datasetName = models.CharField(max_length=1000, blank=True, null=True)
    resourceContacts = models.CharField(max_length=1000, blank=True, null=True)
    references = models.CharField(max_length=1000, blank=True, null=True)
    license = models.CharField(max_length=100, blank=True, null=True)
    selfProduced = models.BooleanField(blank=True, null=True)
    class Meta:
        db_table = 'occurrence'


# 自然史典藏
class Collection(models.Model):
    occurrenceID = models.CharField(max_length=1000, blank=True, null=True)
    collectionID = models.CharField(max_length=1000, blank=True, null=True)
    tbiaUUID = models.AutoField(primary_key=True)
    rightsHolder = models.CharField(max_length=100, blank=True, null=True)
    taxonUUID = models.CharField(max_length=100, blank=True, null=True)
    associatedMedia = models.CharField(max_length=1000, blank=True, null=True)
    originalScientificName = models.CharField(max_length=100, blank=True, null=True)
    originalVernacularName = models.CharField(max_length=100, blank=True, null=True)
    taxonRank = models.CharField(max_length=100, blank=True, null=True)
    typeStatus = models.CharField(max_length=100, blank=True, null=True)
    eventDate = models.CharField(max_length=100, blank=True, null=True)
    standardDate = models.DateTimeField(blank=True, null=True)
    verbatimLongitude = models.CharField(max_length=1000, blank=True, null=True)
    verbatimLatitude = models.CharField(max_length=1000, blank=True, null=True)
    verbatimCoordinateSystem = models.CharField(max_length=100, blank=True, null=True)
    verbatimSRS = models.CharField(max_length=100, blank=True, null=True)
    standardLongitude = models.DecimalField(max_digits=13, decimal_places=10, blank=True, null=True)
    standardLatitude = models.DecimalField(max_digits=13, decimal_places=10, blank=True, null=True)
    coordinateUncertaintyInMeters = models.CharField(max_length=100, blank=True, null=True)
    dataGeneralizations = models.BooleanField(blank=True, null=True)
    coordinatePrecision = models.CharField(max_length=100, blank=True, null=True)
    locality = models.CharField(max_length=1000, blank=True, null=True)
    organismQuantity = models.CharField(max_length=1000, blank=True, null=True)
    organismQuantityType = models.CharField(max_length=100, blank=True, null=True)
    recordedBy = models.CharField(max_length=100, blank=True, null=True)
    recordNumber = models.CharField(max_length=1000, blank=True, null=True)
    scientificNameID = models.CharField(max_length=100, blank=True, null=True)
    preservation = models.CharField(max_length=1000, blank=True, null=True)
    datasetName = models.CharField(max_length=1000, blank=True, null=True)
    resourceContacts = models.CharField(max_length=1000, blank=True, null=True)
    references = models.CharField(max_length=1000, blank=True, null=True)
    license = models.CharField(max_length=100, blank=True, null=True)
    sensitiveCategory = models.CharField(max_length=100, blank=True, null=True)
    selfProduced = models.BooleanField(blank=True, null=True)
    originalModified = models.DateField(blank=True, null=True)
    originalCreated = models.DateField(blank=True, null=True)
    modified = models.DateField(auto_now_add=True)
    created = models.DateField(auto_now_add=True)
    # def tbiaUUID(self):
    #    return f'col{self.id}'
    class Meta:
        db_table = 'collection'